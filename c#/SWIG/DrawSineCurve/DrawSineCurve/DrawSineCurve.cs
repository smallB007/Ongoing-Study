//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace DrawSineCurve {

public class RECT : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RECT(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RECT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RECT() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DrawSineCurveNativePINVOKE.delete_RECT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public RECT(int left, int top, int right, int bottom) : this(DrawSineCurveNativePINVOKE.new_RECT(left, top, right, bottom), true) {
  }

  public int left {
    set {
      DrawSineCurveNativePINVOKE.RECT_left_set(swigCPtr, value);
    } 
    get {
      int ret = DrawSineCurveNativePINVOKE.RECT_left_get(swigCPtr);
      return ret;
    } 
  }

  public int top {
    set {
      DrawSineCurveNativePINVOKE.RECT_top_set(swigCPtr, value);
    } 
    get {
      int ret = DrawSineCurveNativePINVOKE.RECT_top_get(swigCPtr);
      return ret;
    } 
  }

  public int right {
    set {
      DrawSineCurveNativePINVOKE.RECT_right_set(swigCPtr, value);
    } 
    get {
      int ret = DrawSineCurveNativePINVOKE.RECT_right_get(swigCPtr);
      return ret;
    } 
  }

  public int bottom {
    set {
      DrawSineCurveNativePINVOKE.RECT_bottom_set(swigCPtr, value);
    } 
    get {
      int ret = DrawSineCurveNativePINVOKE.RECT_bottom_get(swigCPtr);
      return ret;
    } 
  }

}

}
namespace DrawSineCurve {

public enum PenStyle {
  Solid = 0,
  Dash = 1,
  Dot = 2,
  DashDot = 3,
  DashDotDot = 4
}

}
namespace DrawSineCurve {

public class PenProperty : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PenProperty(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PenProperty obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PenProperty() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DrawSineCurveNativePINVOKE.delete_PenProperty(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public uint Color {
    set {
      DrawSineCurveNativePINVOKE.PenProperty_Color_set(swigCPtr, value);
    } 
    get {
      uint ret = DrawSineCurveNativePINVOKE.PenProperty_Color_get(swigCPtr);
      return ret;
    } 
  }

  public int Width {
    set {
      DrawSineCurveNativePINVOKE.PenProperty_Width_set(swigCPtr, value);
    } 
    get {
      int ret = DrawSineCurveNativePINVOKE.PenProperty_Width_get(swigCPtr);
      return ret;
    } 
  }

  public PenStyle Style {
    set {
      DrawSineCurveNativePINVOKE.PenProperty_Style_set(swigCPtr, (int)value);
    } 
    get {
      PenStyle ret = (PenStyle)DrawSineCurveNativePINVOKE.PenProperty_Style_get(swigCPtr);
      return ret;
    } 
  }

  public PenProperty(PenStyle style, int width, uint color) : this(DrawSineCurveNativePINVOKE.new_PenProperty((int)style, width, color), true) {
  }

}

}
namespace DrawSineCurve {

class DrawSineCurveNativePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="SWIGRegisterExceptionCallbacks_DrawSineCurveNative")]
    public static extern void SWIGRegisterExceptionCallbacks_DrawSineCurveNative(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_DrawSineCurveNative")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_DrawSineCurveNative(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_DrawSineCurveNative(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_DrawSineCurveNative(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(DrawSineCurveNativePINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(DrawSineCurveNativePINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="SWIGRegisterStringCallback_DrawSineCurveNative")]
    public static extern void SWIGRegisterStringCallback_DrawSineCurveNative(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_DrawSineCurveNative(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static DrawSineCurveNativePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_new_RECT")]
  public static extern global::System.IntPtr new_RECT(int jarg1, int jarg2, int jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_left_set")]
  public static extern void RECT_left_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_left_get")]
  public static extern int RECT_left_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_top_set")]
  public static extern void RECT_top_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_top_get")]
  public static extern int RECT_top_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_right_set")]
  public static extern void RECT_right_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_right_get")]
  public static extern int RECT_right_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_bottom_set")]
  public static extern void RECT_bottom_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_RECT_bottom_get")]
  public static extern int RECT_bottom_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_delete_RECT")]
  public static extern void delete_RECT(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_STRICT_get")]
  public static extern int STRICT_get();

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Color_set")]
  public static extern void PenProperty_Color_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Color_get")]
  public static extern uint PenProperty_Color_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Width_set")]
  public static extern void PenProperty_Width_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Width_get")]
  public static extern int PenProperty_Width_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Style_set")]
  public static extern void PenProperty_Style_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_PenProperty_Style_get")]
  public static extern int PenProperty_Style_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_new_PenProperty")]
  public static extern global::System.IntPtr new_PenProperty(int jarg1, int jarg2, uint jarg3);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_delete_PenProperty")]
  public static extern void delete_PenProperty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_DrawSineCurve__SWIG_0")]
  public static extern void DrawSineCurve__SWIG_0(global::System.IntPtr jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("DrawSineCurveNative", EntryPoint="CSharp_DrawSineCurve__SWIG_1")]
  public static extern void DrawSineCurve__SWIG_1(global::System.IntPtr jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);
}

}
namespace DrawSineCurve {

public class DrawSineCurveNative {
  public static void DrawSineCurve(global::System.IntPtr hdc, System.Drawing.Rectangle rc, PenProperty pen, int xTicksCount) {
    RECT temprc = new RECT(rc.Left, rc.Top, rc.Right, rc.Bottom);
    {
      DrawSineCurveNativePINVOKE.DrawSineCurve__SWIG_0(hdc, RECT.getCPtr(temprc), PenProperty.getCPtr(pen), xTicksCount);
      if (DrawSineCurveNativePINVOKE.SWIGPendingException.Pending) throw DrawSineCurveNativePINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public static void DrawSineCurve(global::System.IntPtr hdc, System.Drawing.Rectangle rc, PenProperty pen) {
    RECT temprc = new RECT(rc.Left, rc.Top, rc.Right, rc.Bottom);
    {
      DrawSineCurveNativePINVOKE.DrawSineCurve__SWIG_1(hdc, RECT.getCPtr(temprc), PenProperty.getCPtr(pen));
      if (DrawSineCurveNativePINVOKE.SWIGPendingException.Pending) throw DrawSineCurveNativePINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public static readonly int STRICT = DrawSineCurveNativePINVOKE.STRICT_get();
}

}
