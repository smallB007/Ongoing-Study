//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace cpp11_li_std_arrayNamespace {

public class ArrayInt6 : global::System.IDisposable, global::System.Collections.IEnumerable
    , global::System.Collections.Generic.IEnumerable<int>
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ArrayInt6(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ArrayInt6 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ArrayInt6() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cpp11_li_std_arrayPINVOKE.delete_ArrayInt6(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ArrayInt6(global::System.Collections.ICollection c) : this() {
    if (c == null)
      throw new global::System.ArgumentNullException("c");
    int end = global::System.Math.Min(this.Count, c.Count);
    int i = 0;
    foreach (int elem in c) {
      if (i >= end)
        break;
      this[i++] = elem;
    }
  }

  public int Count {
    get {
      return (int)size();
    }
  }

  public int this[int index]  {
    get {
      return getitem(index);
    }
    set {
      setitem(index, value);
    }
  }

  public bool IsEmpty {
    get {
      return empty();
    }
  }

  public void CopyTo(int[] array)
  {
    CopyTo(0, array, 0, this.Count);
  }

  public void CopyTo(int[] array, int arrayIndex)
  {
    CopyTo(0, array, arrayIndex, this.Count);
  }

  public void CopyTo(int index, int[] array, int arrayIndex, int count)
  {
    if (array == null)
      throw new global::System.ArgumentNullException("array");
    if (index < 0)
      throw new global::System.ArgumentOutOfRangeException("index", "Value is less than zero");
    if (arrayIndex < 0)
      throw new global::System.ArgumentOutOfRangeException("arrayIndex", "Value is less than zero");
    if (count < 0)
      throw new global::System.ArgumentOutOfRangeException("count", "Value is less than zero");
    if (array.Rank > 1)
      throw new global::System.ArgumentException("Multi dimensional array.", "array");
    if (index+count > this.Count || arrayIndex+count > array.Length)
      throw new global::System.ArgumentException("Number of elements to copy is too large.");
    for (int i=0; i<count; i++)
      array.SetValue(getitemcopy(index+i), arrayIndex+i);
  }

  global::System.Collections.Generic.IEnumerator<int> global::System.Collections.Generic.IEnumerable<int>.GetEnumerator() {
    return new ArrayInt6Enumerator(this);
  }

  global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() {
    return new ArrayInt6Enumerator(this);
  }

  public ArrayInt6Enumerator GetEnumerator() {
    return new ArrayInt6Enumerator(this);
  }

  // Type-safe enumerator
  /// Note that the IEnumerator documentation requires an InvalidOperationException to be thrown
  /// whenever the collection is modified. This has been done for changes in the size of the
  /// collection but not when one of the elements of the collection is modified as it is a bit
  /// tricky to detect unmanaged code that modifies the collection under our feet.
  public sealed class ArrayInt6Enumerator : global::System.Collections.IEnumerator
    , global::System.Collections.Generic.IEnumerator<int>
  {
    private ArrayInt6 collectionRef;
    private int currentIndex;
    private object currentObject;
    private int currentSize;

    public ArrayInt6Enumerator(ArrayInt6 collection) {
      collectionRef = collection;
      currentIndex = -1;
      currentObject = null;
      currentSize = collectionRef.Count;
    }

    // Type-safe iterator Current
    public int Current {
      get {
        if (currentIndex == -1)
          throw new global::System.InvalidOperationException("Enumeration not started.");
        if (currentIndex > currentSize - 1)
          throw new global::System.InvalidOperationException("Enumeration finished.");
        if (currentObject == null)
          throw new global::System.InvalidOperationException("Collection modified.");
        return (int)currentObject;
      }
    }

    // Type-unsafe IEnumerator.Current
    object global::System.Collections.IEnumerator.Current {
      get {
        return Current;
      }
    }

    public bool MoveNext() {
      int size = collectionRef.Count;
      bool moveOkay = (currentIndex+1 < size) && (size == currentSize);
      if (moveOkay) {
        currentIndex++;
        currentObject = collectionRef[currentIndex];
      } else {
        currentObject = null;
      }
      return moveOkay;
    }

    public void Reset() {
      currentIndex = -1;
      currentObject = null;
      if (collectionRef.Count != currentSize) {
        throw new global::System.InvalidOperationException("Collection modified.");
      }
    }

    public void Dispose() {
        currentIndex = -1;
        currentObject = null;
    }
  }

  public ArrayInt6() : this(cpp11_li_std_arrayPINVOKE.new_ArrayInt6__SWIG_0(), true) {
  }

  public ArrayInt6(ArrayInt6 other) : this(cpp11_li_std_arrayPINVOKE.new_ArrayInt6__SWIG_1(ArrayInt6.getCPtr(other)), true) {
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint size() {
    uint ret = cpp11_li_std_arrayPINVOKE.ArrayInt6_size(swigCPtr);
    return ret;
  }

  private bool empty() {
    bool ret = cpp11_li_std_arrayPINVOKE.ArrayInt6_empty(swigCPtr);
    return ret;
  }

  public void Fill(int val) {
    cpp11_li_std_arrayPINVOKE.ArrayInt6_Fill(swigCPtr, val);
  }

  public void Swap(ArrayInt6 other) {
    cpp11_li_std_arrayPINVOKE.ArrayInt6_Swap(swigCPtr, ArrayInt6.getCPtr(other));
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
  }

  private int getitemcopy(int index) {
    int ret = cpp11_li_std_arrayPINVOKE.ArrayInt6_getitemcopy(swigCPtr, index);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int getitem(int index) {
    int ret = cpp11_li_std_arrayPINVOKE.ArrayInt6_getitem(swigCPtr, index);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(int index, int val) {
    cpp11_li_std_arrayPINVOKE.ArrayInt6_setitem(swigCPtr, index, val);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reverse() {
    cpp11_li_std_arrayPINVOKE.ArrayInt6_Reverse__SWIG_0(swigCPtr);
  }

  public void Reverse(int index, int count) {
    cpp11_li_std_arrayPINVOKE.ArrayInt6_Reverse__SWIG_1(swigCPtr, index, count);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace cpp11_li_std_arrayNamespace {

class cpp11_li_std_arrayPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="SWIGRegisterExceptionCallbacks_cpp11_li_std_array")]
    public static extern void SWIGRegisterExceptionCallbacks_cpp11_li_std_array(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_cpp11_li_std_array")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_cpp11_li_std_array(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_cpp11_li_std_array(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_cpp11_li_std_array(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(cpp11_li_std_arrayPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(cpp11_li_std_arrayPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="SWIGRegisterStringCallback_cpp11_li_std_array")]
    public static extern void SWIGRegisterStringCallback_cpp11_li_std_array(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_cpp11_li_std_array(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static cpp11_li_std_arrayPINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_new_ArrayInt6__SWIG_0")]
  public static extern global::System.IntPtr new_ArrayInt6__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_new_ArrayInt6__SWIG_1")]
  public static extern global::System.IntPtr new_ArrayInt6__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_size")]
  public static extern uint ArrayInt6_size(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_empty")]
  public static extern bool ArrayInt6_empty(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_Fill")]
  public static extern void ArrayInt6_Fill(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_Swap")]
  public static extern void ArrayInt6_Swap(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_getitemcopy")]
  public static extern int ArrayInt6_getitemcopy(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_getitem")]
  public static extern int ArrayInt6_getitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_setitem")]
  public static extern void ArrayInt6_setitem(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_Reverse__SWIG_0")]
  public static extern void ArrayInt6_Reverse__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_ArrayInt6_Reverse__SWIG_1")]
  public static extern void ArrayInt6_Reverse__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_delete_ArrayInt6")]
  public static extern void delete_ArrayInt6(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayOutVal")]
  public static extern global::System.IntPtr arrayOutVal();

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayOutRef")]
  public static extern global::System.IntPtr arrayOutRef();

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayOutConstRef")]
  public static extern global::System.IntPtr arrayOutConstRef();

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayOutPtr")]
  public static extern global::System.IntPtr arrayOutPtr();

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayInVal")]
  public static extern global::System.IntPtr arrayInVal(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayInConstRef")]
  public static extern global::System.IntPtr arrayInConstRef(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayInRef")]
  public static extern void arrayInRef(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("CPP11StdArrayTestSuiteNative", EntryPoint="CSharp_arrayInPtr")]
  public static extern void arrayInPtr(global::System.Runtime.InteropServices.HandleRef jarg1);
}

}
namespace cpp11_li_std_arrayNamespace {

public class cpp11_li_std_array {
  public static ArrayInt6 arrayOutVal() {
    ArrayInt6 ret = new ArrayInt6(cpp11_li_std_arrayPINVOKE.arrayOutVal(), true);
    return ret;
  }

  public static ArrayInt6 arrayOutRef() {
    ArrayInt6 ret = new ArrayInt6(cpp11_li_std_arrayPINVOKE.arrayOutRef(), false);
    return ret;
  }

  public static ArrayInt6 arrayOutConstRef() {
    ArrayInt6 ret = new ArrayInt6(cpp11_li_std_arrayPINVOKE.arrayOutConstRef(), false);
    return ret;
  }

  public static ArrayInt6 arrayOutPtr() {
    global::System.IntPtr cPtr = cpp11_li_std_arrayPINVOKE.arrayOutPtr();
    ArrayInt6 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ArrayInt6(cPtr, false);
    return ret;
  }

  public static ArrayInt6 arrayInVal(ArrayInt6 myarray) {
    ArrayInt6 ret = new ArrayInt6(cpp11_li_std_arrayPINVOKE.arrayInVal(ArrayInt6.getCPtr(myarray)), true);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ArrayInt6 arrayInConstRef(ArrayInt6 myarray) {
    ArrayInt6 ret = new ArrayInt6(cpp11_li_std_arrayPINVOKE.arrayInConstRef(ArrayInt6.getCPtr(myarray)), false);
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void arrayInRef(ArrayInt6 myarray) {
    cpp11_li_std_arrayPINVOKE.arrayInRef(ArrayInt6.getCPtr(myarray));
    if (cpp11_li_std_arrayPINVOKE.SWIGPendingException.Pending) throw cpp11_li_std_arrayPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void arrayInPtr(ArrayInt6 myarray) {
    cpp11_li_std_arrayPINVOKE.arrayInPtr(ArrayInt6.getCPtr(myarray));
  }

}

}
